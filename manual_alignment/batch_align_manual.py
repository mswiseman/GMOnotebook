from skimage.io import imread, imshow, imsave
from skimage import transform
from skimage import img_as_ubyte
import matplotlib.pyplot as plt
import numpy as np
import PIL
import glob
import argparse
import sys

parser = argparse.ArgumentParser(description="""This script is used to apply
batch transformation of RGB images to align with hyperspectral images,
using a homography matrix manually generated by the user.""")

parser.add_argument('--img_dir', type = str,
                    help = """Directory where all RGB images are stored""")
parser.add_argument('--hyp_path', type = str,
                    help = 'Path to hyperspectral image layer converted to RGB jpg')
parser.add_argument('--matrix', type = str,
                    dest = 'tform_params_path',
                    help = """Path to homography matrix generated by user, using
                    method described in `manual_alignment` notebooks in GMOnotebook
                    repository.""")

args = parser.parse_args()

img_dir = args.img_dir
rgb_paths_1 = glob.glob(img_dir + "*_rgb.jpg")
rgb_paths_1 = [x for x in rgb_paths_1 if "cropped" not in x]
rgb_paths_2 = glob.glob(img_dir + "*_segment_uncropped.png")
rgb_paths = rgb_paths_1 + rgb_paths_2

hyp_path = args.hyp_path
hyp = imread(hyp_path)

tform_params_path = args.tform_params_path
tform_params = np.load(tform_params_path)

for i in range(0, len(rgb_paths)):
    #print(i)
    rgb = imread(rgb_paths[i])

    rgb = np.flipud(rgb)
    rgb = np.rot90(rgb)

    # Order = 0 for nearest neighbor interpolation, essential fors segmentation masks
    tf_img = transform.warp(rgb,
                            np.linalg.inv(tform_params),
                            order = 0)

    tf_img_cropped = tf_img[0:hyp.shape[0],
                            0:hyp.shape[1],
                            :]

    new_path = rgb_paths[i].replace("_rgb.jpg", "_rgb_processed.jpg")
    new_path = new_path.replace("_segment_uncropped.png",
                                "_segment_uncropped_processed.png")
    
    if new_path == rgb_paths[i]:
        raise Exception("Workflow is broken. Please contact Michael (michael.nagle@oregonstate.edu)")
        sys.exit("Error")

    #tf_img_cropped = np.uint8(tf_img_cropped)
    
    
    
    imsave(new_path, img_as_ubyte(tf_img_cropped))